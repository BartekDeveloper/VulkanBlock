<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_first__test_8cpp_source" xml:lang="en-US">
<title>first_test.cpp</title>
<indexterm><primary>src/test_1/first_test.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_first__test_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_first__test_8hpp">first_test.hpp</link>&quot;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00002"/>00002 
<anchor xml:id="_first__test_8cpp_source_1l00003"/><link linkend="_first__test_8cpp_1a816ab7d5c2ce1f0a01216042837beb93">00003</link> <emphasis role="preprocessor">#define&#32;GLM_FORCE_RADIANS&#32;&#32;</emphasis><emphasis role="comment">//&#32;forcing&#32;radians&#32;instead&#32;of&#32;degrees&#32;(no&#32;matter&#32;your</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;os&#32;settings)</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00005"/><link linkend="_first__test_8cpp_1aa53e0967978ad7a8792f6961156ec968">00005</link> <emphasis role="preprocessor">#define&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;&#32;</emphasis><emphasis role="comment">//&#32;forcing&#32;depth&#32;to&#32;be&#32;from&#32;0&#32;to&#32;1</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;glm/glm.hpp&gt;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00007"/>00007 
<anchor xml:id="_first__test_8cpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;std</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00012"/>00012 
<anchor xml:id="_first__test_8cpp_source_1l00013"/>00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_blocky_vulkan">BlockyVulkan</link>&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00014"/>00014 
<anchor xml:id="_first__test_8cpp_source_1l00015"/><link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data">00015</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data">SimplePushConstantData</link>&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00016"/><link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1accbcacd7987cc4fc6a0439fbde1cd468">00016</link> &#32;&#32;&#32;&#32;glm::mat2&#32;<link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1accbcacd7987cc4fc6a0439fbde1cd468">transform</link>{1.f};&#32;&#32;<emphasis role="comment">//&#32;Initializes&#32;main&#32;diagonal,&#32;not&#32;every&#32;entry</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00017"/><link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1a0387a7feb49b1a549584efcd10127dae">00017</link> &#32;&#32;&#32;&#32;glm::vec2&#32;<link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1a0387a7feb49b1a549584efcd10127dae">offset</link>;
<anchor xml:id="_first__test_8cpp_source_1l00018"/><link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1a91c723d61a718577d34b4a3fea3590dd">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(16)&#32;glm::vec3&#32;<link linkend="_struct_blocky_vulkan_1_1_simple_push_constant_data_1a91c723d61a718577d34b4a3fea3590dd">color</link>;
<anchor xml:id="_first__test_8cpp_source_1l00019"/>00019 };
<anchor xml:id="_first__test_8cpp_source_1l00020"/>00020 
<anchor xml:id="_first__test_8cpp_source_1l00021"/><link linkend="_class_blocky_vulkan_1_1_first_test_1aae748a33a479466a837baaa37df9c39f">00021</link> <link linkend="_class_blocky_vulkan_1_1_first_test_1aae748a33a479466a837baaa37df9c39f">FirstTest::FirstTest</link>()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;LoadGameObjects();
<anchor xml:id="_first__test_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;CreatePipelineLayout();
<anchor xml:id="_first__test_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;RecreateSwapChain();
<anchor xml:id="_first__test_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;CreateCommandBuffers();
<anchor xml:id="_first__test_8cpp_source_1l00026"/>00026 }
<anchor xml:id="_first__test_8cpp_source_1l00027"/>00027 
<anchor xml:id="_first__test_8cpp_source_1l00028"/><link linkend="_class_blocky_vulkan_1_1_first_test_1a21d40444d4659ff4b68046682665c84e">00028</link> <link linkend="_class_blocky_vulkan_1_1_first_test_1a21d40444d4659ff4b68046682665c84e">FirstTest::~FirstTest</link>()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;vkDestroyPipelineLayout(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;pipelineLayout,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00030"/>00030 }
<anchor xml:id="_first__test_8cpp_source_1l00031"/>00031 
<anchor xml:id="_first__test_8cpp_source_1l00032"/><link linkend="_class_blocky_vulkan_1_1_first_test_1a905363df2403c92de3da3fb24fa9673b">00032</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_blocky_vulkan_1_1_first_test_1a905363df2403c92de3da3fb24fa9673b">FirstTest::Run</link>()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Limit&#32;max&#32;push&#32;constant&#32;size:&#32;&quot;</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1aa21b177cd0be90aec7ecb0179fd7e734">properties</link>.limits.maxPushConstantsSize&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="_first__test_8cpp_source_1l00035"/>00035 
<anchor xml:id="_first__test_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!window.<link linkend="_class_blocky_vulkan_1_1_window_1a9ff4c2b5e9d07acc9eb5454ffcdb4ff5">ShouldClose</link>())&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwPollEvents();
<anchor xml:id="_first__test_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DrawFrame();
<anchor xml:id="_first__test_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00040"/>00040 
<anchor xml:id="_first__test_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;vkDeviceWaitIdle(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>());
<anchor xml:id="_first__test_8cpp_source_1l00042"/>00042 }
<anchor xml:id="_first__test_8cpp_source_1l00043"/>00043 
<anchor xml:id="_first__test_8cpp_source_1l00044"/><link linkend="_class_blocky_vulkan_1_1_first_test_1aae5365a9bbdf34c8d8b5ac1993bcebca">00044</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_blocky_vulkan_1_1_first_test_1aae5365a9bbdf34c8d8b5ac1993bcebca">FirstTest::Sierpinski</link>(std::vector&lt;Model::Vertex&gt;&#32;&amp;vertices,&#32;<emphasis role="keywordtype">int</emphasis>&#32;depth,
<anchor xml:id="_first__test_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec2&#32;left,&#32;glm::vec2&#32;right,&#32;glm::vec2&#32;top)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(depth&#32;&lt;=&#32;0)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices.push_back({top});
<anchor xml:id="_first__test_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices.push_back({right});
<anchor xml:id="_first__test_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertices.push_back({left});
<anchor xml:id="_first__test_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;leftTop&#32;=&#32;0.5f&#32;*&#32;(left&#32;+&#32;top);
<anchor xml:id="_first__test_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;rightTop&#32;=&#32;0.5f&#32;*&#32;(right&#32;+&#32;top);
<anchor xml:id="_first__test_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;leftRight&#32;=&#32;0.5f&#32;*&#32;(left&#32;+&#32;right);
<anchor xml:id="_first__test_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_first_test_1aae5365a9bbdf34c8d8b5ac1993bcebca">Sierpinski</link>(vertices,&#32;depth&#32;-&#32;1,&#32;left,&#32;leftRight,&#32;leftTop);
<anchor xml:id="_first__test_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_first_test_1aae5365a9bbdf34c8d8b5ac1993bcebca">Sierpinski</link>(vertices,&#32;depth&#32;-&#32;1,&#32;leftRight,&#32;right,&#32;rightTop);
<anchor xml:id="_first__test_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_first_test_1aae5365a9bbdf34c8d8b5ac1993bcebca">Sierpinski</link>(vertices,&#32;depth&#32;-&#32;1,&#32;leftTop,&#32;rightTop,&#32;top);
<anchor xml:id="_first__test_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_first__test_8cpp_source_1l00059"/>00059 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::LoadGameObjects()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sierpinski(&#32;vertices,&#32;2,&#32;{&#32;-1.f,&#32;-1.f&#32;},&#32;{&#32;1.f,&#32;-1.f&#32;},&#32;{&#32;.0f,&#32;1.f&#32;}</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;);</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00062"/>00062 
<anchor xml:id="_first__test_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;std::vector&lt;Model::Vertex&gt;&#32;verticies{{{-.75f,&#32;-.75f},&#32;{1.f,&#32;.0f,&#32;.0f}},
<anchor xml:id="_first__test_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{.75f,&#32;-.75f},&#32;{.0f,&#32;.0f,&#32;1.f}},
<anchor xml:id="_first__test_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{-.0f,&#32;.75f},&#32;{.0f,&#32;1.f,&#32;.0f}}};
<anchor xml:id="_first__test_8cpp_source_1l00066"/>00066 
<anchor xml:id="_first__test_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;model&#32;=&#32;std::make_shared&lt;Model&gt;(device,&#32;verticies);
<anchor xml:id="_first__test_8cpp_source_1l00068"/>00068 
<anchor xml:id="_first__test_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;triangle&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_game_object_1a0cf4c0d3e2627d56d7385c4d98e7735a">GameObject::createGameObject</link>();
<anchor xml:id="_first__test_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;triangle.model&#32;=&#32;model;
<anchor xml:id="_first__test_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;triangle.color&#32;=&#32;{.2f,&#32;.1f,&#32;.8f};
<anchor xml:id="_first__test_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;triangle.transform2D.translation.x&#32;=&#32;.2f;
<anchor xml:id="_first__test_8cpp_source_1l00073"/>00073 
<anchor xml:id="_first__test_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;gameObjects.push_back(std::move(triangle));
<anchor xml:id="_first__test_8cpp_source_1l00075"/>00075 }
<anchor xml:id="_first__test_8cpp_source_1l00076"/>00076 
<anchor xml:id="_first__test_8cpp_source_1l00077"/>00077 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::CreatePipelineLayout()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Creating&#32;push&#32;constants</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;VkPushConstantRange&#32;pushConstRange{};
<anchor xml:id="_first__test_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;pushConstRange.stageFlags&#32;=
<anchor xml:id="_first__test_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_SHADER_STAGE_VERTEX_BIT&#32;|&#32;VK_SHADER_STAGE_FRAGMENT_BIT;
<anchor xml:id="_first__test_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;pushConstRange.offset&#32;=&#32;0;
<anchor xml:id="_first__test_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;pushConstRange.size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(SimplePushConstantData);
<anchor xml:id="_first__test_8cpp_source_1l00084"/>00084 
<anchor xml:id="_first__test_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Setting&#32;up&#32;Layout&#32;info</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;VkPipelineLayoutCreateInfo&#32;pipelineLayoutInfo{};
<anchor xml:id="_first__test_8cpp_source_1l00087"/>00087 
<anchor xml:id="_first__test_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;pipelineLayoutInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
<anchor xml:id="_first__test_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;pipelineLayoutInfo.setLayoutCount&#32;=&#32;0;
<anchor xml:id="_first__test_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;pipelineLayoutInfo.pSetLayouts&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_first__test_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;pipelineLayoutInfo.pushConstantRangeCount&#32;=&#32;1;
<anchor xml:id="_first__test_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;pipelineLayoutInfo.pPushConstantRanges&#32;=&#32;&amp;pushConstRange;
<anchor xml:id="_first__test_8cpp_source_1l00093"/>00093 
<anchor xml:id="_first__test_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreatePipelineLayout(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;pipelineLayoutInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_first__test_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pipelineLayout)&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;pipeline&#32;layout!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00098"/>00098 }
<anchor xml:id="_first__test_8cpp_source_1l00099"/>00099 
<anchor xml:id="_first__test_8cpp_source_1l00100"/>00100 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::CreatePipeline()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;assert(swapChain&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;create&#32;pipeline&#32;before&#32;swap&#32;chain!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;assert(pipelineLayout&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&amp;&amp;
<anchor xml:id="_first__test_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;create&#32;pipeline&#32;before&#32;pipeline&#32;layout!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00104"/>00104 
<anchor xml:id="_first__test_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;PipelineConfigInfo&#32;pipelineConfig{};
<anchor xml:id="_first__test_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_pipeline_1a921ac3065459aee5818a300bb87e8eed">Pipeline::DefaultPipelineConfigInfo</link>(pipelineConfig);
<anchor xml:id="_first__test_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;pipelineConfig.renderPass&#32;=&#32;swapChain-&gt;getRenderPass();
<anchor xml:id="_first__test_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;pipelineConfig.pipelineLayout&#32;=&#32;pipelineLayout;
<anchor xml:id="_first__test_8cpp_source_1l00109"/>00109 
<anchor xml:id="_first__test_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;pipeline&#32;=
<anchor xml:id="_first__test_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_unique&lt;Pipeline&gt;(device,&#32;<emphasis role="stringliteral">&quot;shaders/simple.vert.spv&quot;</emphasis>,
<anchor xml:id="_first__test_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;shaders/simple.frag.spv&quot;</emphasis>,&#32;pipelineConfig);
<anchor xml:id="_first__test_8cpp_source_1l00113"/>00113 }
<anchor xml:id="_first__test_8cpp_source_1l00114"/>00114 
<anchor xml:id="_first__test_8cpp_source_1l00115"/>00115 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::RecreateSwapChain()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;extent&#32;=&#32;window.<link linkend="_class_blocky_vulkan_1_1_window_1aad516780cfcfdf75091ac30465d28072">getExtend</link>();
<anchor xml:id="_first__test_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(extent.width&#32;==&#32;0&#32;||&#32;extent.height&#32;==&#32;0)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extent&#32;=&#32;window.<link linkend="_class_blocky_vulkan_1_1_window_1aad516780cfcfdf75091ac30465d28072">getExtend</link>();
<anchor xml:id="_first__test_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwWaitEvents();
<anchor xml:id="_first__test_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00121"/>00121 
<anchor xml:id="_first__test_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;vkDeviceWaitIdle(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>());
<anchor xml:id="_first__test_8cpp_source_1l00123"/>00123 
<anchor xml:id="_first__test_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(swapChain&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swapChain&#32;=&#32;std::make_unique&lt;SwapChain&gt;(device,&#32;extent);
<anchor xml:id="_first__test_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swapChain&#32;=
<anchor xml:id="_first__test_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_unique&lt;SwapChain&gt;(device,&#32;extent,&#32;std::move(swapChain));
<anchor xml:id="_first__test_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(swapChain-&gt;imageCount()&#32;!=&#32;commandBuffers.size())&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FreeCommandBuffers();
<anchor xml:id="_first__test_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateCommandBuffers();
<anchor xml:id="_first__test_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00134"/>00134 
<anchor xml:id="_first__test_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;CreatePipeline();
<anchor xml:id="_first__test_8cpp_source_1l00136"/>00136 }
<anchor xml:id="_first__test_8cpp_source_1l00137"/>00137 
<anchor xml:id="_first__test_8cpp_source_1l00138"/>00138 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::CreateCommandBuffers()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;commandBuffers.resize(swapChain-&gt;imageCount());
<anchor xml:id="_first__test_8cpp_source_1l00140"/>00140 
<anchor xml:id="_first__test_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;VkCommandBufferAllocateInfo&#32;allocInfo{};
<anchor xml:id="_first__test_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;allocInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
<anchor xml:id="_first__test_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;allocInfo.level&#32;=&#32;VK_COMMAND_BUFFER_LEVEL_PRIMARY;
<anchor xml:id="_first__test_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;allocInfo.commandPool&#32;=&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a406e7e7a3c33c969cfe9b1d8165270f5">getCommandPool</link>();
<anchor xml:id="_first__test_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;allocInfo.commandBufferCount&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(commandBuffers.size());
<anchor xml:id="_first__test_8cpp_source_1l00146"/>00146 
<anchor xml:id="_first__test_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkAllocateCommandBuffers(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;allocInfo,
<anchor xml:id="_first__test_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commandBuffers.data())&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;allocate&#32;command&#32;buffers&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00151"/>00151 }
<anchor xml:id="_first__test_8cpp_source_1l00152"/>00152 
<anchor xml:id="_first__test_8cpp_source_1l00153"/>00153 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::FreeCommandBuffers()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;vkFreeCommandBuffers(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a406e7e7a3c33c969cfe9b1d8165270f5">getCommandPool</link>(),
<anchor xml:id="_first__test_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(commandBuffers.size()),
<anchor xml:id="_first__test_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commandBuffers.data());
<anchor xml:id="_first__test_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;commandBuffers.clear();
<anchor xml:id="_first__test_8cpp_source_1l00158"/>00158 }
<anchor xml:id="_first__test_8cpp_source_1l00159"/>00159 
<anchor xml:id="_first__test_8cpp_source_1l00160"/>00160 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::RecordCommandBuffer(<emphasis role="keywordtype">int</emphasis>&#32;imageIndex)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;VkCommandBufferBeginInfo&#32;beginInfo{};
<anchor xml:id="_first__test_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;beginInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
<anchor xml:id="_first__test_8cpp_source_1l00163"/>00163 
<anchor xml:id="_first__test_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkBeginCommandBuffer(commandBuffers[imageIndex],&#32;&amp;beginInfo)&#32;!=
<anchor xml:id="_first__test_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;begin&#32;recording&#32;command&#32;buffer!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00168"/>00168 
<anchor xml:id="_first__test_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;FirstTest::RenderGameObjects(&#32;VkCommandBuffer&#32;commandBuffer&#32;)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00170"/>00170 
<anchor xml:id="_first__test_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00172"/>00172 
<anchor xml:id="_first__test_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;VkRenderPassBeginInfo&#32;renderPassInfo{};
<anchor xml:id="_first__test_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;renderPassInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
<anchor xml:id="_first__test_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;renderPassInfo.renderPass&#32;=&#32;swapChain-&gt;getRenderPass();
<anchor xml:id="_first__test_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;renderPassInfo.framebuffer&#32;=&#32;swapChain-&gt;getFrameBuffer(imageIndex);
<anchor xml:id="_first__test_8cpp_source_1l00177"/>00177 
<anchor xml:id="_first__test_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;renderPassInfo.renderArea.offset&#32;=&#32;{0,&#32;0};
<anchor xml:id="_first__test_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;renderPassInfo.renderArea.extent&#32;=&#32;swapChain-&gt;getSwapChainExtent();
<anchor xml:id="_first__test_8cpp_source_1l00180"/>00180 
<anchor xml:id="_first__test_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;std::array&lt;VkClearValue,&#32;2&gt;&#32;clearValues{};
<anchor xml:id="_first__test_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;clearValues[0].color&#32;=&#32;{.1f,&#32;.1f,&#32;.1f,&#32;1.f};
<anchor xml:id="_first__test_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;clearValues[1].depthStencil&#32;=&#32;{1.f,&#32;0};
<anchor xml:id="_first__test_8cpp_source_1l00184"/>00184 
<anchor xml:id="_first__test_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;renderPassInfo.clearValueCount&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(clearValues.size());
<anchor xml:id="_first__test_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;renderPassInfo.pClearValues&#32;=&#32;clearValues.data();
<anchor xml:id="_first__test_8cpp_source_1l00187"/>00187 
<anchor xml:id="_first__test_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;vkCmdBeginRenderPass(commandBuffers[imageIndex],&#32;&amp;renderPassInfo,
<anchor xml:id="_first__test_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_SUBPASS_CONTENTS_INLINE);
<anchor xml:id="_first__test_8cpp_source_1l00190"/>00190 
<anchor xml:id="_first__test_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Creating&#32;viewport&#32;and&#32;scissor&#32;variables&#32;and&#32;configuring&#32;them</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;VkViewport&#32;viewport{};
<anchor xml:id="_first__test_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;viewport.x&#32;=&#32;.0f;
<anchor xml:id="_first__test_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;viewport.y&#32;=&#32;.0f;
<anchor xml:id="_first__test_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;viewport.width&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(swapChain-&gt;getSwapChainExtent().width);
<anchor xml:id="_first__test_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;viewport.height&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(swapChain-&gt;getSwapChainExtent().height);
<anchor xml:id="_first__test_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;viewport.minDepth&#32;=&#32;.0f;
<anchor xml:id="_first__test_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;viewport.maxDepth&#32;=&#32;1.f;
<anchor xml:id="_first__test_8cpp_source_1l00199"/>00199 
<anchor xml:id="_first__test_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;VkRect2D&#32;scissor({0,&#32;0},&#32;swapChain-&gt;getSwapChainExtent());
<anchor xml:id="_first__test_8cpp_source_1l00201"/>00201 
<anchor xml:id="_first__test_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Setting&#32;up&#32;viewport&#32;and&#32;scissor&#32;so&#32;they&#32;are&#32;used</emphasis>
<anchor xml:id="_first__test_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;vkCmdSetViewport(commandBuffers[imageIndex],&#32;0,&#32;1,&#32;&amp;viewport);
<anchor xml:id="_first__test_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;vkCmdSetScissor(commandBuffers[imageIndex],&#32;0,&#32;1,&#32;&amp;scissor);
<anchor xml:id="_first__test_8cpp_source_1l00205"/>00205 
<anchor xml:id="_first__test_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;pipeline-&gt;Bind(commandBuffers[imageIndex]);
<anchor xml:id="_first__test_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;model-&gt;Bind(commandBuffers[imageIndex]);
<anchor xml:id="_first__test_8cpp_source_1l00208"/>00208 
<anchor xml:id="_first__test_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;8;&#32;j++)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SimplePushConstantData&#32;push{};
<anchor xml:id="_first__test_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push.offset&#32;=&#32;{.0f,&#32;-.4f&#32;+&#32;0.1f&#32;*&#32;j};
<anchor xml:id="_first__test_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push.color&#32;=&#32;{.0f,&#32;.0f,&#32;.2f&#32;+&#32;0.1f&#32;*&#32;j};
<anchor xml:id="_first__test_8cpp_source_1l00213"/>00213 
<anchor xml:id="_first__test_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkCmdPushConstants(
<anchor xml:id="_first__test_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;commandBuffers[imageIndex],&#32;pipelineLayout,
<anchor xml:id="_first__test_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_SHADER_STAGE_VERTEX_BIT&#32;|&#32;VK_SHADER_STAGE_FRAGMENT_BIT,&#32;0,
<anchor xml:id="_first__test_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(SimplePushConstantData),&#32;&amp;push);
<anchor xml:id="_first__test_8cpp_source_1l00218"/>00218 
<anchor xml:id="_first__test_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model-&gt;Draw(commandBuffers[imageIndex]);
<anchor xml:id="_first__test_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00221"/>00221 
<anchor xml:id="_first__test_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;vkCmdEndRenderPass(commandBuffers[imageIndex]);
<anchor xml:id="_first__test_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkEndCommandBuffer(commandBuffers[imageIndex])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;record&#32;command&#32;buffer!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00226"/>00226 }
<anchor xml:id="_first__test_8cpp_source_1l00227"/>00227 
<anchor xml:id="_first__test_8cpp_source_1l00228"/>00228 <emphasis role="keywordtype">void</emphasis>&#32;FirstTest::DrawFrame()&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;uint32_t&#32;imageIdx;
<anchor xml:id="_first__test_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;swapChain-&gt;acquireNextImage(&amp;imageIdx);
<anchor xml:id="_first__test_8cpp_source_1l00231"/>00231 
<anchor xml:id="_first__test_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;VK_ERROR_OUT_OF_DATE_KHR)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecreateSwapChain();
<anchor xml:id="_first__test_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_first__test_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00236"/>00236 
<anchor xml:id="_first__test_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;VK_SUCCESS&#32;&amp;&amp;&#32;result&#32;!=&#32;VK_SUBOPTIMAL_KHR)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;aquire&#32;next&#32;swapchain&#32;image!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00240"/>00240 
<anchor xml:id="_first__test_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;RecordCommandBuffer(imageIdx);
<anchor xml:id="_first__test_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;result&#32;=
<anchor xml:id="_first__test_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swapChain-&gt;submitCommandBuffers(&amp;commandBuffers[imageIdx],&#32;&amp;imageIdx);
<anchor xml:id="_first__test_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;==&#32;VK_ERROR_OUT_OF_DATE_KHR&#32;||&#32;result&#32;==&#32;VK_SUBOPTIMAL_KHR&#32;||
<anchor xml:id="_first__test_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;window.<link linkend="_class_blocky_vulkan_1_1_window_1a212571d9aceb5c39a5c3351f49693d8a">WasWindowResized</link>())&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;window.<link linkend="_class_blocky_vulkan_1_1_window_1a0f31e90160d16c1ed8e86ab99276432e">ResetFlag_WindowResized</link>();
<anchor xml:id="_first__test_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecreateSwapChain();
<anchor xml:id="_first__test_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_first__test_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_first__test_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;present&#32;swap&#32;chain&#32;image!&quot;</emphasis>);
<anchor xml:id="_first__test_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;}
<anchor xml:id="_first__test_8cpp_source_1l00253"/>00253 }
<anchor xml:id="_first__test_8cpp_source_1l00254"/>00254 
<anchor xml:id="_first__test_8cpp_source_1l00255"/>00255 }&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;BlockyVulkan</emphasis>
</programlisting></section>
