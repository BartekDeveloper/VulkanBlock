<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_model_8cpp_source" xml:lang="en-US">
<title>model.cpp</title>
<indexterm><primary>src/model/model.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_model_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_model_8hpp">model.hpp</link>&quot;</emphasis>
<anchor xml:id="_model_8cpp_source_1l00002"/>00002 
<anchor xml:id="_model_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
<anchor xml:id="_model_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_model_8cpp_source_1l00005"/>00005 
<anchor xml:id="_model_8cpp_source_1l00006"/>00006 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_blocky_vulkan">BlockyVulkan</link>&#32;{
<anchor xml:id="_model_8cpp_source_1l00007"/>00007 
<anchor xml:id="_model_8cpp_source_1l00008"/><link linkend="_class_blocky_vulkan_1_1_model_1a3160d503440410109ba049e8501fc1b1">00008</link> <link linkend="_class_blocky_vulkan_1_1_model_1a3160d503440410109ba049e8501fc1b1">Model::Model</link>(&#32;<link linkend="_class_blocky_vulkan_1_1_device">Device</link>&#32;&amp;device,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Vertex&gt;&#32;&amp;verticies&#32;)&#32;:&#32;device(device)&#32;{
<anchor xml:id="_model_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;CreateVertexBuffers(&#32;verticies&#32;);
<anchor xml:id="_model_8cpp_source_1l00010"/>00010 }
<anchor xml:id="_model_8cpp_source_1l00011"/>00011 
<anchor xml:id="_model_8cpp_source_1l00012"/><link linkend="_class_blocky_vulkan_1_1_model_1a130ba2bea277851e74b0603e6edf2135">00012</link> <link linkend="_class_blocky_vulkan_1_1_model_1a130ba2bea277851e74b0603e6edf2135">Model::~Model</link>()&#32;{
<anchor xml:id="_model_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;vkDestroyBuffer(&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;vertexBuffer,&#32;<emphasis role="keyword">nullptr</emphasis>&#32;);
<anchor xml:id="_model_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;vkFreeMemory(&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;vertexBufferMemory,&#32;<emphasis role="keyword">nullptr</emphasis>&#32;);
<anchor xml:id="_model_8cpp_source_1l00015"/>00015 }
<anchor xml:id="_model_8cpp_source_1l00016"/>00016 
<anchor xml:id="_model_8cpp_source_1l00017"/>00017 <emphasis role="keywordtype">void</emphasis>&#32;Model::CreateVertexBuffers(&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;Vertex&gt;&#32;&amp;verticies&#32;)&#32;{
<anchor xml:id="_model_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;vertexCount&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(&#32;verticies.size()&#32;);
<anchor xml:id="_model_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;assert(&#32;vertexCount&#32;&gt;=&#32;3&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Vertex&#32;count&#32;must&#32;be&#32;at&#32;least&#32;3!&quot;</emphasis>&#32;);
<anchor xml:id="_model_8cpp_source_1l00020"/>00020 
<anchor xml:id="_model_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;VkDeviceSize&#32;bufferSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(&#32;verticies[&#32;0&#32;]&#32;)&#32;*&#32;vertexCount;
<anchor xml:id="_model_8cpp_source_1l00022"/>00022 
<anchor xml:id="_model_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a4de673bdd57fa7f666ed13785178ef64">createBuffer</link>(&#32;bufferSize,&#32;VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
<anchor xml:id="_model_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT&#32;|&#32;VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
<anchor xml:id="_model_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertexBuffer,
<anchor xml:id="_model_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertexBufferMemory
<anchor xml:id="_model_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_model_8cpp_source_1l00028"/>00028 
<anchor xml:id="_model_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*data;
<anchor xml:id="_model_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;vkMapMemory(&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;vertexBufferMemory,&#32;0,&#32;bufferSize,&#32;0,&#32;&amp;data&#32;);
<anchor xml:id="_model_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;memcpy(&#32;data,&#32;verticies.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(bufferSize)&#32;);
<anchor xml:id="_model_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;vkUnmapMemory(&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;vertexBufferMemory&#32;);
<anchor xml:id="_model_8cpp_source_1l00033"/>00033 }
<anchor xml:id="_model_8cpp_source_1l00034"/>00034 
<anchor xml:id="_model_8cpp_source_1l00035"/><link linkend="_class_blocky_vulkan_1_1_model_1a4535c857dd2caa03f6cca44778ec7712">00035</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_blocky_vulkan_1_1_model_1a4535c857dd2caa03f6cca44778ec7712">Model::Draw</link>(&#32;VkCommandBuffer&#32;commandBuffer&#32;)&#32;{
<anchor xml:id="_model_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;vkCmdDraw(&#32;commandBuffer,&#32;vertexCount,&#32;1,&#32;0,&#32;0&#32;);
<anchor xml:id="_model_8cpp_source_1l00037"/>00037 }
<anchor xml:id="_model_8cpp_source_1l00038"/>00038 
<anchor xml:id="_model_8cpp_source_1l00039"/><link linkend="_class_blocky_vulkan_1_1_model_1ab268beca056e5766fc4fe330baaea064">00039</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_blocky_vulkan_1_1_model_1ab268beca056e5766fc4fe330baaea064">Model::Bind</link>(&#32;VkCommandBuffer&#32;commandBuffer&#32;)&#32;{
<anchor xml:id="_model_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;VkBuffer&#32;buffers[]&#32;=&#32;{&#32;vertexBuffer&#32;};
<anchor xml:id="_model_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;VkDeviceSize&#32;offsets[]&#32;=&#32;{&#32;0&#32;};
<anchor xml:id="_model_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;vkCmdBindVertexBuffers(&#32;commandBuffer,&#32;0,&#32;1,&#32;buffers,&#32;offsets&#32;);
<anchor xml:id="_model_8cpp_source_1l00043"/>00043 }
<anchor xml:id="_model_8cpp_source_1l00044"/>00044 
<anchor xml:id="_model_8cpp_source_1l00045"/><link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex_1a97a92a1265877fff2f287b07d0ac9db4">00045</link> std::vector&lt;VkVertexInputBindingDescription&gt;&#32;<link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex_1a97a92a1265877fff2f287b07d0ac9db4">Model::Vertex::GetBindingDescriptions</link>()&#32;{
<anchor xml:id="_model_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;std::vector&lt;VkVertexInputBindingDescription&gt;&#32;bindingDescriptions(&#32;1&#32;);
<anchor xml:id="_model_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;bindingDescriptions[&#32;0&#32;].binding&#32;=&#32;0;
<anchor xml:id="_model_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;bindingDescriptions[&#32;0&#32;].stride&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex">Vertex</link>);
<anchor xml:id="_model_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;bindingDescriptions[&#32;0&#32;].inputRate&#32;=&#32;VK_VERTEX_INPUT_RATE_VERTEX;
<anchor xml:id="_model_8cpp_source_1l00050"/>00050 
<anchor xml:id="_model_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bindingDescriptions;
<anchor xml:id="_model_8cpp_source_1l00052"/>00052 }
<anchor xml:id="_model_8cpp_source_1l00053"/>00053 
<anchor xml:id="_model_8cpp_source_1l00054"/><link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex_1afb7939bc1d098cd9d72f99a95a14ed72">00054</link> std::vector&lt;VkVertexInputAttributeDescription&gt;&#32;<link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex_1afb7939bc1d098cd9d72f99a95a14ed72">Model::Vertex::GetAttributeDescriptions</link>()&#32;{
<anchor xml:id="_model_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;std::vector&lt;VkVertexInputAttributeDescription&gt;&#32;attributeDescriptions(&#32;2&#32;);
<anchor xml:id="_model_8cpp_source_1l00056"/>00056 
<anchor xml:id="_model_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Position</emphasis>
<anchor xml:id="_model_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;0&#32;].binding&#32;=&#32;0;
<anchor xml:id="_model_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;0&#32;].location&#32;=&#32;0;
<anchor xml:id="_model_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;0&#32;].format&#32;=&#32;VK_FORMAT_R32G32_SFLOAT;
<anchor xml:id="_model_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;0&#32;].offset&#32;=&#32;offsetof(<link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex">Vertex</link>,&#32;position);
<anchor xml:id="_model_8cpp_source_1l00062"/>00062 
<anchor xml:id="_model_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Color</emphasis>
<anchor xml:id="_model_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;1&#32;].binding&#32;=&#32;0;
<anchor xml:id="_model_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;1&#32;].location&#32;=&#32;1;
<anchor xml:id="_model_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;1&#32;].format&#32;=&#32;VK_FORMAT_R32G32B32_SFLOAT;
<anchor xml:id="_model_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;attributeDescriptions[&#32;1&#32;].offset&#32;=&#32;offsetof(<link linkend="_struct_blocky_vulkan_1_1_model_1_1_vertex">Vertex</link>,&#32;color);
<anchor xml:id="_model_8cpp_source_1l00068"/>00068 
<anchor xml:id="_model_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Shortened&#32;form&#32;*/</emphasis>
<anchor xml:id="_model_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_model_8cpp_source_1l00071"/>00071 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;@return&#32;{</emphasis>
<anchor xml:id="_model_8cpp_source_1l00072"/>00072 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0,&#32;0,&#32;VK_FORMAT_R32G32_SFLOAT,&#32;offsetof(Vertex,&#32;position)},</emphasis>
<anchor xml:id="_model_8cpp_source_1l00073"/>00073 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;0,&#32;1,&#32;VK_FORMAT_R32G32B32_SFLOAT,&#32;offsetof(Vertex,&#32;color)};</emphasis>
<anchor xml:id="_model_8cpp_source_1l00074"/>00074 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_model_8cpp_source_1l00075"/>00075 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_model_8cpp_source_1l00076"/>00076 
<anchor xml:id="_model_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;attributeDescriptions;
<anchor xml:id="_model_8cpp_source_1l00078"/>00078 }
<anchor xml:id="_model_8cpp_source_1l00079"/>00079 
<anchor xml:id="_model_8cpp_source_1l00080"/>00080 }
</programlisting></section>
