<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_window_8cpp_source" xml:lang="en-US">
<title>window.cpp</title>
<indexterm><primary>src/window/window.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_window_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_window_8hpp">window.hpp</link>&quot;</emphasis>
<anchor xml:id="_window_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="_window_8cpp_source_1l00003"/>00003 
<anchor xml:id="_window_8cpp_source_1l00004"/>00004 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_blocky_vulkan">BlockyVulkan</link>&#32;{
<anchor xml:id="_window_8cpp_source_1l00005"/><link linkend="_class_blocky_vulkan_1_1_window_1a8e9aec6037e2788564d22151d08c7baf">00005</link> <link linkend="_class_blocky_vulkan_1_1_window_1a8e9aec6037e2788564d22151d08c7baf">Window::Window</link>(<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;std::string&#32;name)
<anchor xml:id="_window_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;:&#32;width{w},&#32;height{h},&#32;name{name}&#32;{
<anchor xml:id="_window_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;InitWindow();
<anchor xml:id="_window_8cpp_source_1l00008"/>00008 }
<anchor xml:id="_window_8cpp_source_1l00009"/>00009 
<anchor xml:id="_window_8cpp_source_1l00010"/><link linkend="_class_blocky_vulkan_1_1_window_1a2cee7976fcb8feddc70c346ac300e940">00010</link> <link linkend="_class_blocky_vulkan_1_1_window_1a2cee7976fcb8feddc70c346ac300e940">Window::~Window</link>()&#32;{
<anchor xml:id="_window_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;`&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(window)&#32;glfwDestroyWindow(window);
<anchor xml:id="_window_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;glfwTerminate();
<anchor xml:id="_window_8cpp_source_1l00013"/>00013 }
<anchor xml:id="_window_8cpp_source_1l00014"/>00014 
<anchor xml:id="_window_8cpp_source_1l00015"/>00015 <emphasis role="keywordtype">void</emphasis>&#32;Window::InitWindow()&#32;{
<anchor xml:id="_window_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;glfwInit();
<anchor xml:id="_window_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_CLIENT_API,&#32;GLFW_NO_API);
<anchor xml:id="_window_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_RESIZABLE,&#32;GLFW_TRUE);
<anchor xml:id="_window_8cpp_source_1l00019"/>00019 
<anchor xml:id="_window_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;window&#32;=&#32;glfwCreateWindow(width,&#32;height,&#32;name.c_str(),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_window_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;glfwSetWindowUserPointer(&#32;window,&#32;<emphasis role="keyword">this</emphasis>&#32;);
<anchor xml:id="_window_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;glfwSetFramebufferSizeCallback(&#32;window,&#32;FrameBufferResizeCallback&#32;);
<anchor xml:id="_window_8cpp_source_1l00023"/>00023 }
<anchor xml:id="_window_8cpp_source_1l00024"/>00024 
<anchor xml:id="_window_8cpp_source_1l00025"/><link linkend="_class_blocky_vulkan_1_1_window_1a96d585feaed2d71904c337611dc935d6">00025</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_blocky_vulkan_1_1_window_1a96d585feaed2d71904c337611dc935d6">Window::CreateWindowSurface</link>(VkInstance&#32;instance,&#32;VkSurfaceKHR&#32;*surface)&#32;{
<anchor xml:id="_window_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;glfwCreateWindowSurface(&#32;instance,&#32;window,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;surface&#32;)&#32;!=&#32;VK_SUCCESS&#32;)&#32;{
<anchor xml:id="_window_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;window&#32;surface!&quot;</emphasis>&#32;);
<anchor xml:id="_window_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_window_8cpp_source_1l00029"/>00029 }
<anchor xml:id="_window_8cpp_source_1l00030"/>00030 
<anchor xml:id="_window_8cpp_source_1l00031"/>00031 <emphasis role="keywordtype">void</emphasis>&#32;Window::FrameBufferResizeCallback(&#32;GLFWwindow&#32;*window,&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">int</emphasis>&#32;height&#32;)&#32;{
<anchor xml:id="_window_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;window__&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_class_blocky_vulkan_1_1_window">Window</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(&#32;glfwGetWindowUserPointer(&#32;window&#32;)&#32;);
<anchor xml:id="_window_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;window__-&gt;frameBufferResized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_window_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;window__-&gt;width&#32;=&#32;width;
<anchor xml:id="_window_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;window__-&gt;height&#32;=&#32;height;
<anchor xml:id="_window_8cpp_source_1l00036"/>00036 }
<anchor xml:id="_window_8cpp_source_1l00037"/>00037 
<anchor xml:id="_window_8cpp_source_1l00038"/>00038 }
</programlisting></section>
