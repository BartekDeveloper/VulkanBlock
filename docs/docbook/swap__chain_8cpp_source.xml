<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_swap__chain_8cpp_source" xml:lang="en-US">
<title>swap_chain.cpp</title>
<indexterm><primary>src/swapchain/swap_chain.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_swap__chain_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_swap__chain_8hpp">swap_chain.hpp</link>&quot;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00002"/>00002 
<anchor xml:id="_swap__chain_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;std</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00011"/>00011 
<anchor xml:id="_swap__chain_8cpp_source_1l00012"/>00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_blocky_vulkan">BlockyVulkan</link>&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00013"/>00013 
<anchor xml:id="_swap__chain_8cpp_source_1l00014"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a28ffd9fc853641200b7d22a82d4b6678">00014</link> <link linkend="_class_blocky_vulkan_1_1_swap_chain_1a28ffd9fc853641200b7d22a82d4b6678">SwapChain::SwapChain</link>(<link linkend="_class_blocky_vulkan_1_1_device">Device</link>&#32;&amp;deviceRef,&#32;VkExtent2D&#32;extent)
<anchor xml:id="_swap__chain_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;:&#32;device{deviceRef},&#32;windowExtent{extent}&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;Init();
<anchor xml:id="_swap__chain_8cpp_source_1l00017"/>00017 }
<anchor xml:id="_swap__chain_8cpp_source_1l00018"/>00018 
<anchor xml:id="_swap__chain_8cpp_source_1l00019"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a446c8a493a9baa381af05d98f5b40d89">00019</link> <link linkend="_class_blocky_vulkan_1_1_swap_chain_1a28ffd9fc853641200b7d22a82d4b6678">SwapChain::SwapChain</link>(<link linkend="_class_blocky_vulkan_1_1_device">Device</link>&#32;&amp;deviceRef,&#32;VkExtent2D&#32;extent,&#32;std::shared_ptr&lt;SwapChain&gt;&#32;previous)
<anchor xml:id="_swap__chain_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;:&#32;device{deviceRef},&#32;windowExtent{extent},&#32;oldSwapChain(previous)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;Init();
<anchor xml:id="_swap__chain_8cpp_source_1l00022"/>00022 
<anchor xml:id="_swap__chain_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clean&#32;up&#32;old&#32;swap&#32;chain</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;oldSwapChain&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_swap__chain_8cpp_source_1l00025"/>00025 }
<anchor xml:id="_swap__chain_8cpp_source_1l00026"/>00026 
<anchor xml:id="_swap__chain_8cpp_source_1l00027"/>00027 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::Init()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;createSwapChain();
<anchor xml:id="_swap__chain_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;createImageViews();
<anchor xml:id="_swap__chain_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;createRenderPass();
<anchor xml:id="_swap__chain_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;createDepthResources();
<anchor xml:id="_swap__chain_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;createFramebuffers();
<anchor xml:id="_swap__chain_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;createSyncObjects();
<anchor xml:id="_swap__chain_8cpp_source_1l00034"/>00034 }
<anchor xml:id="_swap__chain_8cpp_source_1l00035"/>00035 
<anchor xml:id="_swap__chain_8cpp_source_1l00036"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a15d6d8b52a7997bdd27be2d22a35c9a5">00036</link> <link linkend="_class_blocky_vulkan_1_1_swap_chain_1a15d6d8b52a7997bdd27be2d22a35c9a5">SwapChain::~SwapChain</link>()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;imageView&#32;:&#32;swapChainImageViews)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroyImageView(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;imageView,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;swapChainImageViews.clear();
<anchor xml:id="_swap__chain_8cpp_source_1l00041"/>00041 
<anchor xml:id="_swap__chain_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(swapChain&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroySwapchainKHR(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;swapChain,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swapChain&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_swap__chain_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00046"/>00046 
<anchor xml:id="_swap__chain_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;depthImages.size();&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroyImageView(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;depthImageViews[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroyImage(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;depthImages[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkFreeMemory(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;depthImageMemorys[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00052"/>00052 
<anchor xml:id="_swap__chain_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;framebuffer&#32;:&#32;swapChainFramebuffers)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroyFramebuffer(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;framebuffer,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00056"/>00056 
<anchor xml:id="_swap__chain_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;vkDestroyRenderPass(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;renderPass,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00058"/>00058 
<anchor xml:id="_swap__chain_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cleanup&#32;synchronization&#32;objects</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>;&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroySemaphore(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;renderFinishedSemaphores[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroySemaphore(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;imageAvailableSemaphores[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkDestroyFence(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;inFlightFences[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00065"/>00065 }
<anchor xml:id="_swap__chain_8cpp_source_1l00066"/>00066 
<anchor xml:id="_swap__chain_8cpp_source_1l00067"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a649d6c6cca871c742e5b7fa90f0cb50e">00067</link> VkResult&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a649d6c6cca871c742e5b7fa90f0cb50e">SwapChain::acquireNextImage</link>(uint32_t&#32;*imageIndex)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;vkWaitForFences(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;1,&#32;&amp;inFlightFences[currentFrame],&#32;VK_TRUE,
<anchor xml:id="_swap__chain_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::numeric_limits&lt;uint64_t&gt;::max());
<anchor xml:id="_swap__chain_8cpp_source_1l00070"/>00070 
<anchor xml:id="_swap__chain_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;VkResult&#32;result&#32;=&#32;vkAcquireNextImageKHR(
<anchor xml:id="_swap__chain_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;swapChain,&#32;std::numeric_limits&lt;uint64_t&gt;::max(),
<anchor xml:id="_swap__chain_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageAvailableSemaphores[currentFrame],&#32;&#32;<emphasis role="comment">//&#32;must&#32;be&#32;a&#32;not&#32;signaled</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;semaphore</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_NULL_HANDLE,&#32;imageIndex);
<anchor xml:id="_swap__chain_8cpp_source_1l00076"/>00076 
<anchor xml:id="_swap__chain_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_swap__chain_8cpp_source_1l00078"/>00078 }
<anchor xml:id="_swap__chain_8cpp_source_1l00079"/>00079 
<anchor xml:id="_swap__chain_8cpp_source_1l00080"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a78bbedddd61a8befbe772baf46f2bc9b">00080</link> VkResult&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a78bbedddd61a8befbe772baf46f2bc9b">SwapChain::submitCommandBuffers</link>(<emphasis role="keyword">const</emphasis>&#32;VkCommandBuffer&#32;*buffers,
<anchor xml:id="_swap__chain_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;*imageIndex)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(imagesInFlight[*imageIndex]&#32;!=&#32;VK_NULL_HANDLE)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkWaitForFences(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;1,&#32;&amp;imagesInFlight[*imageIndex],&#32;VK_TRUE,
<anchor xml:id="_swap__chain_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UINT64_MAX);
<anchor xml:id="_swap__chain_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;imagesInFlight[*imageIndex]&#32;=&#32;inFlightFences[currentFrame];
<anchor xml:id="_swap__chain_8cpp_source_1l00087"/>00087 
<anchor xml:id="_swap__chain_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;VkSubmitInfo&#32;submitInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;submitInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_SUBMIT_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00090"/>00090 
<anchor xml:id="_swap__chain_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;VkSemaphore&#32;waitSemaphores[]&#32;=&#32;{imageAvailableSemaphores[currentFrame]};
<anchor xml:id="_swap__chain_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;VkPipelineStageFlags&#32;waitStages[]&#32;=&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT
<anchor xml:id="_swap__chain_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;};
<anchor xml:id="_swap__chain_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;submitInfo.waitSemaphoreCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;submitInfo.pWaitSemaphores&#32;=&#32;waitSemaphores;
<anchor xml:id="_swap__chain_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;submitInfo.pWaitDstStageMask&#32;=&#32;waitStages;
<anchor xml:id="_swap__chain_8cpp_source_1l00098"/>00098 
<anchor xml:id="_swap__chain_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;submitInfo.commandBufferCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;submitInfo.pCommandBuffers&#32;=&#32;buffers;
<anchor xml:id="_swap__chain_8cpp_source_1l00101"/>00101 
<anchor xml:id="_swap__chain_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;VkSemaphore&#32;signalSemaphores[]&#32;=&#32;{renderFinishedSemaphores[currentFrame]};
<anchor xml:id="_swap__chain_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;submitInfo.signalSemaphoreCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;submitInfo.pSignalSemaphores&#32;=&#32;signalSemaphores;
<anchor xml:id="_swap__chain_8cpp_source_1l00105"/>00105 
<anchor xml:id="_swap__chain_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;vkResetFences(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;1,&#32;&amp;inFlightFences[currentFrame]);
<anchor xml:id="_swap__chain_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkQueueSubmit(device.<link linkend="_class_blocky_vulkan_1_1_device_1a4a40e0cccdd4c1b3dd840fe8e2a1b9c9">graphicsQueue</link>(),&#32;1,&#32;&amp;submitInfo,
<anchor xml:id="_swap__chain_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inFlightFences[currentFrame])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;submit&#32;draw&#32;command&#32;buffer!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00111"/>00111 
<anchor xml:id="_swap__chain_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;VkPresentInfoKHR&#32;presentInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;presentInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
<anchor xml:id="_swap__chain_8cpp_source_1l00114"/>00114 
<anchor xml:id="_swap__chain_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;presentInfo.waitSemaphoreCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;presentInfo.pWaitSemaphores&#32;=&#32;signalSemaphores;
<anchor xml:id="_swap__chain_8cpp_source_1l00117"/>00117 
<anchor xml:id="_swap__chain_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;VkSwapchainKHR&#32;swapChains[]&#32;=&#32;{swapChain};
<anchor xml:id="_swap__chain_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;presentInfo.swapchainCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;presentInfo.pSwapchains&#32;=&#32;swapChains;
<anchor xml:id="_swap__chain_8cpp_source_1l00121"/>00121 
<anchor xml:id="_swap__chain_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;presentInfo.pImageIndices&#32;=&#32;imageIndex;
<anchor xml:id="_swap__chain_8cpp_source_1l00123"/>00123 
<anchor xml:id="_swap__chain_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;vkQueuePresentKHR(device.<link linkend="_class_blocky_vulkan_1_1_device_1a522545cf12e6a3e11522c60d751d6833">presentQueue</link>(),&#32;&amp;presentInfo);
<anchor xml:id="_swap__chain_8cpp_source_1l00125"/>00125 
<anchor xml:id="_swap__chain_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;currentFrame&#32;=&#32;(currentFrame&#32;+&#32;1)&#32;%&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>;
<anchor xml:id="_swap__chain_8cpp_source_1l00127"/>00127 
<anchor xml:id="_swap__chain_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_swap__chain_8cpp_source_1l00129"/>00129 }
<anchor xml:id="_swap__chain_8cpp_source_1l00130"/>00130 
<anchor xml:id="_swap__chain_8cpp_source_1l00131"/>00131 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createSwapChain()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details">SwapChainSupportDetails</link>&#32;swapChainSupport&#32;=&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a3157d2aea16af098ce0cd890188d5b38">getSwapChainSupport</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00133"/>00133 
<anchor xml:id="_swap__chain_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;VkSurfaceFormatKHR&#32;surfaceFormat&#32;=
<anchor xml:id="_swap__chain_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chooseSwapSurfaceFormat(swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1a77a80a3f974c0f4a2c18fad136c610c8">formats</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;VkPresentModeKHR&#32;presentMode&#32;=
<anchor xml:id="_swap__chain_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chooseSwapPresentMode(swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1a1e924955c92c4cab575a0c99e451b738">presentModes</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;VkExtent2D&#32;extent&#32;=&#32;chooseSwapExtent(swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00139"/>00139 
<anchor xml:id="_swap__chain_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>&#32;=&#32;swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>.minImageCount&#32;+&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>.maxImageCount&#32;&gt;&#32;0&#32;&amp;&amp;
<anchor xml:id="_swap__chain_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>&#32;&gt;&#32;swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>.maxImageCount)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>&#32;=&#32;swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>.maxImageCount;
<anchor xml:id="_swap__chain_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00145"/>00145 
<anchor xml:id="_swap__chain_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;VkSwapchainCreateInfoKHR&#32;createInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;createInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
<anchor xml:id="_swap__chain_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;createInfo.surface&#32;=&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a5f068bfa59fef43e83ea22f64390f3cd">surface</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00149"/>00149 
<anchor xml:id="_swap__chain_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;createInfo.minImageCount&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>;
<anchor xml:id="_swap__chain_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;createInfo.imageFormat&#32;=&#32;surfaceFormat.format;
<anchor xml:id="_swap__chain_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;createInfo.imageColorSpace&#32;=&#32;surfaceFormat.colorSpace;
<anchor xml:id="_swap__chain_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;createInfo.imageExtent&#32;=&#32;extent;
<anchor xml:id="_swap__chain_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;createInfo.imageArrayLayers&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;createInfo.imageUsage&#32;=&#32;VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00156"/>00156 
<anchor xml:id="_swap__chain_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;QueueFamilyIndices&#32;indices&#32;=&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1ad3ddfd3647179abd6d940be294e790c8">findPhysicalQueueFamilies</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;uint32_t&#32;queueFamilyIndices[]&#32;=&#32;{indices.graphicsFamily,
<anchor xml:id="_swap__chain_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indices.presentFamily
<anchor xml:id="_swap__chain_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_swap__chain_8cpp_source_1l00161"/>00161 
<anchor xml:id="_swap__chain_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indices.graphicsFamily&#32;!=&#32;indices.presentFamily)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.imageSharingMode&#32;=&#32;VK_SHARING_MODE_CONCURRENT;
<anchor xml:id="_swap__chain_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.queueFamilyIndexCount&#32;=&#32;2;
<anchor xml:id="_swap__chain_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.pQueueFamilyIndices&#32;=&#32;queueFamilyIndices;
<anchor xml:id="_swap__chain_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.imageSharingMode&#32;=&#32;VK_SHARING_MODE_EXCLUSIVE;
<anchor xml:id="_swap__chain_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.queueFamilyIndexCount&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optional</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createInfo.pQueueFamilyIndices&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Optional</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00171"/>00171 
<anchor xml:id="_swap__chain_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;createInfo.preTransform&#32;=&#32;swapChainSupport.<link linkend="_struct_blocky_vulkan_1_1_swap_chain_support_details_1aa1a932872e671b491887ab593174050e">capabilities</link>.currentTransform;
<anchor xml:id="_swap__chain_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;createInfo.compositeAlpha&#32;=&#32;VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
<anchor xml:id="_swap__chain_8cpp_source_1l00174"/>00174 
<anchor xml:id="_swap__chain_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;createInfo.presentMode&#32;=&#32;presentMode;
<anchor xml:id="_swap__chain_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;createInfo.clipped&#32;=&#32;VK_TRUE;
<anchor xml:id="_swap__chain_8cpp_source_1l00177"/>00177 
<anchor xml:id="_swap__chain_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;createInfo.oldSwapchain&#32;=&#32;oldSwapChain&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;?&#32;VK_NULL_HANDLE&#32;:&#32;oldSwapChain-&gt;swapChain;
<anchor xml:id="_swap__chain_8cpp_source_1l00179"/>00179 
<anchor xml:id="_swap__chain_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateSwapchainKHR(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;createInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;&amp;swapChain)&#32;!=
<anchor xml:id="_swap__chain_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;swap&#32;chain!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00184"/>00184 
<anchor xml:id="_swap__chain_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;only&#32;specified&#32;a&#32;minimum&#32;number&#32;of&#32;images&#32;in&#32;the&#32;swap&#32;chain,&#32;so&#32;the</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation&#32;is&#32;allowed&#32;to&#32;create&#32;a&#32;swap&#32;chain&#32;with&#32;more.&#32;That&apos;s&#32;why</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&apos;ll&#32;first&#32;query&#32;the&#32;final&#32;number&#32;of&#32;images&#32;with&#32;vkGetSwapchainImagesKHR,</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;resize&#32;the&#32;container&#32;and&#32;finally&#32;call&#32;it&#32;again&#32;to&#32;retrieve&#32;the</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handles.</emphasis>
<anchor xml:id="_swap__chain_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;vkGetSwapchainImagesKHR(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;swapChain,&#32;&amp;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>,&#32;<emphasis role="keyword">nullptr</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;swapChainImages.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;vkGetSwapchainImagesKHR(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;swapChain,&#32;&amp;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>,
<anchor xml:id="_swap__chain_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swapChainImages.data());
<anchor xml:id="_swap__chain_8cpp_source_1l00194"/>00194 
<anchor xml:id="_swap__chain_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;swapChainImageFormat&#32;=&#32;surfaceFormat.format;
<anchor xml:id="_swap__chain_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;swapChainExtent&#32;=&#32;extent;
<anchor xml:id="_swap__chain_8cpp_source_1l00197"/>00197 }
<anchor xml:id="_swap__chain_8cpp_source_1l00198"/>00198 
<anchor xml:id="_swap__chain_8cpp_source_1l00199"/>00199 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createImageViews()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;swapChainImageViews.resize(swapChainImages.size());
<anchor xml:id="_swap__chain_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;swapChainImages.size();&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkImageViewCreateInfo&#32;viewInfo{};
<anchor xml:id="_swap__chain_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.image&#32;=&#32;swapChainImages[i];
<anchor xml:id="_swap__chain_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.viewType&#32;=&#32;VK_IMAGE_VIEW_TYPE_2D;
<anchor xml:id="_swap__chain_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.format&#32;=&#32;swapChainImageFormat;
<anchor xml:id="_swap__chain_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.aspectMask&#32;=&#32;VK_IMAGE_ASPECT_COLOR_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.baseMipLevel&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.levelCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.baseArrayLayer&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.layerCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00212"/>00212 
<anchor xml:id="_swap__chain_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateImageView(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;viewInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;swapChainImageViews[i])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;texture&#32;image&#32;view!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00218"/>00218 }
<anchor xml:id="_swap__chain_8cpp_source_1l00219"/>00219 
<anchor xml:id="_swap__chain_8cpp_source_1l00220"/>00220 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createRenderPass()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;VkAttachmentDescription&#32;depthAttachment{};
<anchor xml:id="_swap__chain_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;depthAttachment.format&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a032370066d55a3da18dfcb8ff25bd634">findDepthFormat</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;depthAttachment.samples&#32;=&#32;VK_SAMPLE_COUNT_1_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;depthAttachment.loadOp&#32;=&#32;VK_ATTACHMENT_LOAD_OP_CLEAR;
<anchor xml:id="_swap__chain_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;depthAttachment.storeOp&#32;=&#32;VK_ATTACHMENT_STORE_OP_DONT_CARE;
<anchor xml:id="_swap__chain_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;depthAttachment.stencilLoadOp&#32;=&#32;VK_ATTACHMENT_LOAD_OP_DONT_CARE;
<anchor xml:id="_swap__chain_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;depthAttachment.stencilStoreOp&#32;=&#32;VK_ATTACHMENT_STORE_OP_DONT_CARE;
<anchor xml:id="_swap__chain_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;depthAttachment.initialLayout&#32;=&#32;VK_IMAGE_LAYOUT_UNDEFINED;
<anchor xml:id="_swap__chain_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;depthAttachment.finalLayout&#32;=
<anchor xml:id="_swap__chain_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
<anchor xml:id="_swap__chain_8cpp_source_1l00231"/>00231 
<anchor xml:id="_swap__chain_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;VkAttachmentReference&#32;depthAttachmentRef{};
<anchor xml:id="_swap__chain_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;depthAttachmentRef.attachment&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;depthAttachmentRef.layout&#32;=&#32;VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
<anchor xml:id="_swap__chain_8cpp_source_1l00235"/>00235 
<anchor xml:id="_swap__chain_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;VkAttachmentDescription&#32;colorAttachment&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;colorAttachment.format&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a5bdf6b58fbb9b4ece8d2836e44c7bda2">getSwapChainImageFormat</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;colorAttachment.samples&#32;=&#32;VK_SAMPLE_COUNT_1_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;colorAttachment.loadOp&#32;=&#32;VK_ATTACHMENT_LOAD_OP_CLEAR;
<anchor xml:id="_swap__chain_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;colorAttachment.storeOp&#32;=&#32;VK_ATTACHMENT_STORE_OP_STORE;
<anchor xml:id="_swap__chain_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;colorAttachment.stencilStoreOp&#32;=&#32;VK_ATTACHMENT_STORE_OP_DONT_CARE;
<anchor xml:id="_swap__chain_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;colorAttachment.stencilLoadOp&#32;=&#32;VK_ATTACHMENT_LOAD_OP_DONT_CARE;
<anchor xml:id="_swap__chain_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;colorAttachment.initialLayout&#32;=&#32;VK_IMAGE_LAYOUT_UNDEFINED;
<anchor xml:id="_swap__chain_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;colorAttachment.finalLayout&#32;=&#32;VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
<anchor xml:id="_swap__chain_8cpp_source_1l00245"/>00245 
<anchor xml:id="_swap__chain_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;VkAttachmentReference&#32;colorAttachmentRef&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;colorAttachmentRef.attachment&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;colorAttachmentRef.layout&#32;=&#32;VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
<anchor xml:id="_swap__chain_8cpp_source_1l00249"/>00249 
<anchor xml:id="_swap__chain_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;VkSubpassDescription&#32;subpass&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;subpass.pipelineBindPoint&#32;=&#32;VK_PIPELINE_BIND_POINT_GRAPHICS;
<anchor xml:id="_swap__chain_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;subpass.colorAttachmentCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;subpass.pColorAttachments&#32;=&#32;&amp;colorAttachmentRef;
<anchor xml:id="_swap__chain_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;subpass.pDepthStencilAttachment&#32;=&#32;&amp;depthAttachmentRef;
<anchor xml:id="_swap__chain_8cpp_source_1l00255"/>00255 
<anchor xml:id="_swap__chain_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;VkSubpassDependency&#32;dependency&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;dependency.srcSubpass&#32;=&#32;VK_SUBPASS_EXTERNAL;
<anchor xml:id="_swap__chain_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;dependency.srcAccessMask&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;dependency.srcStageMask&#32;=&#32;VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT&#32;|
<anchor xml:id="_swap__chain_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;dependency.dstSubpass&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;dependency.dstStageMask&#32;=&#32;VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT&#32;|
<anchor xml:id="_swap__chain_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;dependency.dstAccessMask&#32;=&#32;VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT&#32;|
<anchor xml:id="_swap__chain_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00266"/>00266 
<anchor xml:id="_swap__chain_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;std::array&lt;VkAttachmentDescription,&#32;2&gt;&#32;attachments&#32;=&#32;{colorAttachment,
<anchor xml:id="_swap__chain_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;depthAttachment
<anchor xml:id="_swap__chain_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_swap__chain_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;VkRenderPassCreateInfo&#32;renderPassInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;renderPassInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;renderPassInfo.attachmentCount&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(attachments.size());
<anchor xml:id="_swap__chain_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;renderPassInfo.pAttachments&#32;=&#32;attachments.data();
<anchor xml:id="_swap__chain_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;renderPassInfo.subpassCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;renderPassInfo.pSubpasses&#32;=&#32;&amp;subpass;
<anchor xml:id="_swap__chain_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;renderPassInfo.dependencyCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;renderPassInfo.pDependencies&#32;=&#32;&amp;dependency;
<anchor xml:id="_swap__chain_8cpp_source_1l00278"/>00278 
<anchor xml:id="_swap__chain_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateRenderPass(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;renderPassInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;renderPass)&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;render&#32;pass!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00283"/>00283 }
<anchor xml:id="_swap__chain_8cpp_source_1l00284"/>00284 
<anchor xml:id="_swap__chain_8cpp_source_1l00285"/>00285 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createFramebuffers()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;swapChainFramebuffers.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>());
<anchor xml:id="_swap__chain_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>();&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::array&lt;VkImageView,&#32;2&gt;&#32;attachments&#32;=&#32;{swapChainImageViews[i],
<anchor xml:id="_swap__chain_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;depthImageViews[i]
<anchor xml:id="_swap__chain_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_swap__chain_8cpp_source_1l00291"/>00291 
<anchor xml:id="_swap__chain_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkExtent2D&#32;swapChainExtent&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1adc6458afc40ffae71d6ebe6b23f1d829">getSwapChainExtent</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkFramebufferCreateInfo&#32;framebufferInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.renderPass&#32;=&#32;renderPass;
<anchor xml:id="_swap__chain_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.attachmentCount&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint32_t<emphasis role="keyword">&gt;</emphasis>(attachments.size());
<anchor xml:id="_swap__chain_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.pAttachments&#32;=&#32;attachments.data();
<anchor xml:id="_swap__chain_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.width&#32;=&#32;swapChainExtent.width;
<anchor xml:id="_swap__chain_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.height&#32;=&#32;swapChainExtent.height;
<anchor xml:id="_swap__chain_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;framebufferInfo.layers&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00301"/>00301 
<anchor xml:id="_swap__chain_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateFramebuffer(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;framebufferInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;swapChainFramebuffers[i])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;framebuffer!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00307"/>00307 }
<anchor xml:id="_swap__chain_8cpp_source_1l00308"/>00308 
<anchor xml:id="_swap__chain_8cpp_source_1l00309"/>00309 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createDepthResources()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;VkFormat&#32;depthFormat&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a032370066d55a3da18dfcb8ff25bd634">findDepthFormat</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;VkExtent2D&#32;swapChainExtent&#32;=&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1adc6458afc40ffae71d6ebe6b23f1d829">getSwapChainExtent</link>();
<anchor xml:id="_swap__chain_8cpp_source_1l00312"/>00312 
<anchor xml:id="_swap__chain_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;depthImages.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>());
<anchor xml:id="_swap__chain_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;depthImageMemorys.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>());
<anchor xml:id="_swap__chain_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;depthImageViews.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>());
<anchor xml:id="_swap__chain_8cpp_source_1l00316"/>00316 
<anchor xml:id="_swap__chain_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;depthImages.size();&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkImageCreateInfo&#32;imageInfo{};
<anchor xml:id="_swap__chain_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.imageType&#32;=&#32;VK_IMAGE_TYPE_2D;
<anchor xml:id="_swap__chain_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.extent.width&#32;=&#32;swapChainExtent.width;
<anchor xml:id="_swap__chain_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.extent.height&#32;=&#32;swapChainExtent.height;
<anchor xml:id="_swap__chain_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.extent.depth&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.mipLevels&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.arrayLayers&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.format&#32;=&#32;depthFormat;
<anchor xml:id="_swap__chain_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.tiling&#32;=&#32;VK_IMAGE_TILING_OPTIMAL;
<anchor xml:id="_swap__chain_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.initialLayout&#32;=&#32;VK_IMAGE_LAYOUT_UNDEFINED;
<anchor xml:id="_swap__chain_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.usage&#32;=&#32;VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.samples&#32;=&#32;VK_SAMPLE_COUNT_1_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.sharingMode&#32;=&#32;VK_SHARING_MODE_EXCLUSIVE;
<anchor xml:id="_swap__chain_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;imageInfo.flags&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00333"/>00333 
<anchor xml:id="_swap__chain_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1aacb612b684d04f19342f6537d207fb15">createImageWithInfo</link>(imageInfo,&#32;VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
<anchor xml:id="_swap__chain_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;depthImages[i],&#32;depthImageMemorys[i]);
<anchor xml:id="_swap__chain_8cpp_source_1l00336"/>00336 
<anchor xml:id="_swap__chain_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkImageViewCreateInfo&#32;viewInfo{};
<anchor xml:id="_swap__chain_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.image&#32;=&#32;depthImages[i];
<anchor xml:id="_swap__chain_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.viewType&#32;=&#32;VK_IMAGE_VIEW_TYPE_2D;
<anchor xml:id="_swap__chain_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.format&#32;=&#32;depthFormat;
<anchor xml:id="_swap__chain_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.aspectMask&#32;=&#32;VK_IMAGE_ASPECT_DEPTH_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.baseMipLevel&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.levelCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.baseArrayLayer&#32;=&#32;0;
<anchor xml:id="_swap__chain_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewInfo.subresourceRange.layerCount&#32;=&#32;1;
<anchor xml:id="_swap__chain_8cpp_source_1l00347"/>00347 
<anchor xml:id="_swap__chain_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateImageView(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;viewInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;depthImageViews[i])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;texture&#32;image&#32;view!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00353"/>00353 }
<anchor xml:id="_swap__chain_8cpp_source_1l00354"/>00354 
<anchor xml:id="_swap__chain_8cpp_source_1l00355"/>00355 <emphasis role="keywordtype">void</emphasis>&#32;SwapChain::createSyncObjects()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;imageAvailableSemaphores.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;renderFinishedSemaphores.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;inFlightFences.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>);
<anchor xml:id="_swap__chain_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;imagesInFlight.resize(<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a65bf2dc77700ab941caec9ab15d82afa">imageCount</link>(),&#32;VK_NULL_HANDLE);
<anchor xml:id="_swap__chain_8cpp_source_1l00360"/>00360 
<anchor xml:id="_swap__chain_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;VkSemaphoreCreateInfo&#32;semaphoreInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;semaphoreInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00363"/>00363 
<anchor xml:id="_swap__chain_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;VkFenceCreateInfo&#32;fenceInfo&#32;=&#32;{};
<anchor xml:id="_swap__chain_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;fenceInfo.sType&#32;=&#32;VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
<anchor xml:id="_swap__chain_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;fenceInfo.flags&#32;=&#32;VK_FENCE_CREATE_SIGNALED_BIT;
<anchor xml:id="_swap__chain_8cpp_source_1l00367"/>00367 
<anchor xml:id="_swap__chain_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a82288aecf69bcdcc0e2c0d6e525709f9">MAX_FRAMES_IN_FLIGHT</link>;&#32;i++)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vkCreateSemaphore(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;semaphoreInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;imageAvailableSemaphores[i])&#32;!=&#32;VK_SUCCESS&#32;||
<anchor xml:id="_swap__chain_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkCreateSemaphore(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;semaphoreInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;renderFinishedSemaphores[i])&#32;!=&#32;VK_SUCCESS&#32;||
<anchor xml:id="_swap__chain_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vkCreateFence(device.<link linkend="_class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa">device</link>(),&#32;&amp;fenceInfo,&#32;<emphasis role="keyword">nullptr</emphasis>,
<anchor xml:id="_swap__chain_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;inFlightFences[i])&#32;!=&#32;VK_SUCCESS)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(
<anchor xml:id="_swap__chain_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;failed&#32;to&#32;create&#32;synchronization&#32;objects&#32;for&#32;a&#32;frame!&quot;</emphasis>);
<anchor xml:id="_swap__chain_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00379"/>00379 }
<anchor xml:id="_swap__chain_8cpp_source_1l00380"/>00380 
<anchor xml:id="_swap__chain_8cpp_source_1l00381"/>00381 VkSurfaceFormatKHR&#32;SwapChain::chooseSwapSurfaceFormat(
<anchor xml:id="_swap__chain_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;VkSurfaceFormatKHR&gt;&#32;&amp;availableFormats)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;availableFormat&#32;:&#32;availableFormats)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(availableFormat.format&#32;==&#32;VK_FORMAT_B8G8R8A8_SRGB&#32;&amp;&amp;
<anchor xml:id="_swap__chain_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;availableFormat.colorSpace&#32;==&#32;VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;availableFormat;
<anchor xml:id="_swap__chain_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00389"/>00389 
<anchor xml:id="_swap__chain_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;availableFormats[0];
<anchor xml:id="_swap__chain_8cpp_source_1l00391"/>00391 }
<anchor xml:id="_swap__chain_8cpp_source_1l00392"/>00392 
<anchor xml:id="_swap__chain_8cpp_source_1l00393"/>00393 VkPresentModeKHR&#32;SwapChain::chooseSwapPresentMode(
<anchor xml:id="_swap__chain_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;VkPresentModeKHR&gt;&#32;&amp;availablePresentModes)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;availablePresentMode&#32;:&#32;availablePresentModes)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(availablePresentMode&#32;==&#32;VK_PRESENT_MODE_MAILBOX_KHR)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Present&#32;mode:&#32;Mailbox&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_swap__chain_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;availablePresentMode;
<anchor xml:id="_swap__chain_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00401"/>00401 
<anchor xml:id="_swap__chain_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;availablePresentMode&#32;:&#32;availablePresentModes)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(availablePresentMode&#32;==&#32;VK_PRESENT_MODE_IMMEDIATE_KHR)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Present&#32;mode:&#32;Immediate&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_swap__chain_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;availablePresentMode;
<anchor xml:id="_swap__chain_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00408"/>00408 
<anchor xml:id="_swap__chain_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Present&#32;mode:&#32;V-Sync&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_swap__chain_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VK_PRESENT_MODE_FIFO_KHR;
<anchor xml:id="_swap__chain_8cpp_source_1l00411"/>00411 }
<anchor xml:id="_swap__chain_8cpp_source_1l00412"/>00412 
<anchor xml:id="_swap__chain_8cpp_source_1l00413"/>00413 VkExtent2D&#32;SwapChain::chooseSwapExtent(
<anchor xml:id="_swap__chain_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;VkSurfaceCapabilitiesKHR&#32;&amp;capabilities)&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(capabilities.currentExtent.width&#32;!=
<anchor xml:id="_swap__chain_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::numeric_limits&lt;uint32_t&gt;::max())&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capabilities.currentExtent;
<anchor xml:id="_swap__chain_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VkExtent2D&#32;actualExtent&#32;=&#32;windowExtent;
<anchor xml:id="_swap__chain_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actualExtent.width&#32;=&#32;std::max(
<anchor xml:id="_swap__chain_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capabilities.minImageExtent.width,
<anchor xml:id="_swap__chain_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(capabilities.maxImageExtent.width,&#32;actualExtent.width));
<anchor xml:id="_swap__chain_8cpp_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actualExtent.height&#32;=&#32;std::max(
<anchor xml:id="_swap__chain_8cpp_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capabilities.minImageExtent.height,
<anchor xml:id="_swap__chain_8cpp_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(capabilities.maxImageExtent.height,&#32;actualExtent.height));
<anchor xml:id="_swap__chain_8cpp_source_1l00426"/>00426 
<anchor xml:id="_swap__chain_8cpp_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;actualExtent;
<anchor xml:id="_swap__chain_8cpp_source_1l00428"/>00428 &#32;&#32;&#32;&#32;}
<anchor xml:id="_swap__chain_8cpp_source_1l00429"/>00429 }
<anchor xml:id="_swap__chain_8cpp_source_1l00430"/>00430 
<anchor xml:id="_swap__chain_8cpp_source_1l00431"/><link linkend="_class_blocky_vulkan_1_1_swap_chain_1a032370066d55a3da18dfcb8ff25bd634">00431</link> VkFormat&#32;<link linkend="_class_blocky_vulkan_1_1_swap_chain_1a032370066d55a3da18dfcb8ff25bd634">SwapChain::findDepthFormat</link>()&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;device.<link linkend="_class_blocky_vulkan_1_1_device_1a4d650743baa310cfab8703488586d27c">findSupportedFormat</link>(&#32;{
<anchor xml:id="_swap__chain_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_FORMAT_D32_SFLOAT,&#32;VK_FORMAT_D32_SFLOAT_S8_UINT,
<anchor xml:id="_swap__chain_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VK_FORMAT_D24_UNORM_S8_UINT},
<anchor xml:id="_swap__chain_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;VK_IMAGE_TILING_OPTIMAL,&#32;VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT);
<anchor xml:id="_swap__chain_8cpp_source_1l00436"/>00436 }
<anchor xml:id="_swap__chain_8cpp_source_1l00437"/>00437 
<anchor xml:id="_swap__chain_8cpp_source_1l00438"/>00438 }
</programlisting></section>
