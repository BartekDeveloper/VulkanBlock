<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="model_8cpp" kind="file" language="C++">
    <compoundname>model.cpp</compoundname>
    <includes refid="model_8hpp" local="yes">model.hpp</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <incdepgraph>
      <node id="6">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="3">
        <label>../device/device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>model.cpp</label>
        <link refid="model_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../window/window.hpp</label>
        <link refid="window_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>glm/glm.hpp</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="4">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_blocky_vulkan">BlockyVulkan</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="model_8hpp" kindref="compound">model.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_blocky_vulkan" kindref="compound">BlockyVulkan</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_blocky_vulkan_1_1_model_1a3160d503440410109ba049e8501fc1b1" refkind="member"><highlight class="normal"><ref refid="class_blocky_vulkan_1_1_model_1a3160d503440410109ba049e8501fc1b1" kindref="member">Model::Model</ref>(<sp/><ref refid="class_blocky_vulkan_1_1_device" kindref="compound">Device</ref><sp/>&amp;device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vertex&gt;<sp/>&amp;verticies<sp/>)<sp/>:<sp/>device(device)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateVertexBuffers(<sp/>verticies<sp/>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_blocky_vulkan_1_1_model_1a130ba2bea277851e74b0603e6edf2135" refkind="member"><highlight class="normal"><ref refid="class_blocky_vulkan_1_1_model_1a130ba2bea277851e74b0603e6edf2135" kindref="member">Model::~Model</ref>()<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<sp/>device.<ref refid="class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa" kindref="member">device</ref>(),<sp/>vertexBuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<sp/>device.<ref refid="class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa" kindref="member">device</ref>(),<sp/>vertexBufferMemory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Model::CreateVertexBuffers(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vertex&gt;<sp/>&amp;verticies<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>verticies.size()<sp/>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>vertexCount<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>count<sp/>must<sp/>be<sp/>at<sp/>least<sp/>3!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>verticies[<sp/>0<sp/>]<sp/>)<sp/>*<sp/>vertexCount;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>device.<ref refid="class_blocky_vulkan_1_1_device_1a4de673bdd57fa7f666ed13785178ef64" kindref="member">createBuffer</ref>(<sp/>bufferSize,<sp/>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexBuffer,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexBufferMemory</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>vkMapMemory(<sp/>device.<ref refid="class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa" kindref="member">device</ref>(),<sp/>vertexBufferMemory,<sp/>0,<sp/>bufferSize,<sp/>0,<sp/>&amp;data<sp/>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<sp/>data,<sp/>verticies.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bufferSize)<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<sp/>device.<ref refid="class_blocky_vulkan_1_1_device_1abd0f1af74c6907d4354112e1291db9aa" kindref="member">device</ref>(),<sp/>vertexBufferMemory<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_blocky_vulkan_1_1_model_1a4535c857dd2caa03f6cca44778ec7712" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_blocky_vulkan_1_1_model_1a4535c857dd2caa03f6cca44778ec7712" kindref="member">Model::Draw</ref>(<sp/>VkCommandBuffer<sp/>commandBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdDraw(<sp/>commandBuffer,<sp/>vertexCount,<sp/>1,<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_blocky_vulkan_1_1_model_1ab268beca056e5766fc4fe330baaea064" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_blocky_vulkan_1_1_model_1ab268beca056e5766fc4fe330baaea064" kindref="member">Model::Bind</ref>(<sp/>VkCommandBuffer<sp/>commandBuffer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/>buffers[]<sp/>=<sp/>{<sp/>vertexBuffer<sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/>offsets[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBindVertexBuffers(<sp/>commandBuffer,<sp/>0,<sp/>1,<sp/>buffers,<sp/>offsets<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="struct_blocky_vulkan_1_1_model_1_1_vertex_1a97a92a1265877fff2f287b07d0ac9db4" refkind="member"><highlight class="normal">std::vector&lt;VkVertexInputBindingDescription&gt;<sp/><ref refid="struct_blocky_vulkan_1_1_model_1_1_vertex_1a97a92a1265877fff2f287b07d0ac9db4" kindref="member">Model::Vertex::GetBindingDescriptions</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkVertexInputBindingDescription&gt;<sp/>bindingDescriptions(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescriptions[<sp/>0<sp/>].binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescriptions[<sp/>0<sp/>].stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_blocky_vulkan_1_1_model_1_1_vertex" kindref="compound">Vertex</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescriptions[<sp/>0<sp/>].inputRate<sp/>=<sp/>VK_VERTEX_INPUT_RATE_VERTEX;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bindingDescriptions;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="struct_blocky_vulkan_1_1_model_1_1_vertex_1afb7939bc1d098cd9d72f99a95a14ed72" refkind="member"><highlight class="normal">std::vector&lt;VkVertexInputAttributeDescription&gt;<sp/><ref refid="struct_blocky_vulkan_1_1_model_1_1_vertex_1afb7939bc1d098cd9d72f99a95a14ed72" kindref="member">Model::Vertex::GetAttributeDescriptions</ref>()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkVertexInputAttributeDescription&gt;<sp/>attributeDescriptions(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>0<sp/>].binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>0<sp/>].location<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>0<sp/>].format<sp/>=<sp/>VK_FORMAT_R32G32_SFLOAT;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>0<sp/>].offset<sp/>=<sp/>offsetof(<ref refid="struct_blocky_vulkan_1_1_model_1_1_vertex" kindref="compound">Vertex</ref>,<sp/>position);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>1<sp/>].binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>1<sp/>].location<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>1<sp/>].format<sp/>=<sp/>VK_FORMAT_R32G32B32_SFLOAT;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[<sp/>1<sp/>].offset<sp/>=<sp/>offsetof(<ref refid="struct_blocky_vulkan_1_1_model_1_1_vertex" kindref="compound">Vertex</ref>,<sp/>color);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shortened<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@return<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0,<sp/>VK_FORMAT_R32G32_SFLOAT,<sp/>offsetof(Vertex,<sp/>position)},</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>1,<sp/>VK_FORMAT_R32G32B32_SFLOAT,<sp/>offsetof(Vertex,<sp/>color)};</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributeDescriptions;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="X:/Pro/GameDev/VulkanBlock/src/model/model.cpp"/>
  </compounddef>
</doxygen>
