<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="window_8cpp" kind="file" language="C++">
    <compoundname>window.cpp</compoundname>
    <includes refid="window_8hpp" local="yes">window.hpp</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="4">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="1">
        <label>window.cpp</label>
        <link refid="window_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>window.hpp</label>
        <link refid="window_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="3">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_blocky_vulkan">BlockyVulkan</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="window_8hpp" kindref="compound">window.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_blocky_vulkan" kindref="compound">BlockyVulkan</ref><sp/>{</highlight></codeline>
<codeline lineno="5" refid="class_blocky_vulkan_1_1_window_1a8e9aec6037e2788564d22151d08c7baf" refkind="member"><highlight class="normal"><ref refid="class_blocky_vulkan_1_1_window_1a8e9aec6037e2788564d22151d08c7baf" kindref="member">Window::Window</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>std::string<sp/>name)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>width{w},<sp/>height{h},<sp/>name{name}<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>InitWindow();</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_blocky_vulkan_1_1_window_1a2cee7976fcb8feddc70c346ac300e940" refkind="member"><highlight class="normal"><ref refid="class_blocky_vulkan_1_1_window_1a2cee7976fcb8feddc70c346ac300e940" kindref="member">Window::~Window</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>`<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window)<sp/>glfwDestroyWindow(window);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwTerminate();</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Window::InitWindow()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwInit();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CLIENT_API,<sp/>GLFW_NO_API);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_RESIZABLE,<sp/>GLFW_TRUE);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>window<sp/>=<sp/>glfwCreateWindow(width,<sp/>height,<sp/>name.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSetWindowUserPointer(<sp/>window,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSetFramebufferSizeCallback(<sp/>window,<sp/>FrameBufferResizeCallback<sp/>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_blocky_vulkan_1_1_window_1a96d585feaed2d71904c337611dc935d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_blocky_vulkan_1_1_window_1a96d585feaed2d71904c337611dc935d6" kindref="member">Window::CreateWindowSurface</ref>(VkInstance<sp/>instance,<sp/>VkSurfaceKHR<sp/>*surface)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>glfwCreateWindowSurface(<sp/>instance,<sp/>window,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>surface<sp/>)<sp/>!=<sp/>VK_SUCCESS<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>window<sp/>surface!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Window::FrameBufferResizeCallback(<sp/>GLFWwindow<sp/>*window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window__<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_blocky_vulkan_1_1_window" kindref="compound">Window</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>glfwGetWindowUserPointer(<sp/>window<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>window__-&gt;frameBufferResized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>window__-&gt;width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>window__-&gt;height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="X:/Pro/GameDev/VulkanBlock/src/window/window.cpp"/>
  </compounddef>
</doxygen>
